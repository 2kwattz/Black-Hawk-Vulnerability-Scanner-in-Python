import pyfiglet
import subprocess
import requests
from termcolor import colored
import time
import os
from bs4 import BeautifulSoup

def ping_host(host):
    command = ['ping', '-c', '1', '-W', '1', host]

    try:
        # subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        ping_process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        start_time = time.time()

        while True:
            output_line = ping_process.stdout.readline().strip()
            if output_line:
                print(output_line)
                time.sleep(1)
            else:
                break 

            # Check if 4 seconds have elapsed
            if time.time() - start_time >= 4:
                break

        # Wait for the ping command process to finish
        ping_process.wait()

        # Check the return code of the ping command
        if ping_process.returncode == 0:
            print(colored(f"\n[*] Host responded to Ping. Connection Status : 200  \n",color="green"))
            return True  # Host responded to ping
        else:
            print(colored(f"\n[*] Host did not respond to Ping ",color="red"))
            return False  # Host did not respond to ping

    except subprocess.CalledProcessError:
        return False  # Error occurred during the ping command
    

        print("\nHost is responding to ping\n")
        return True
    except subprocess.CalledProcessError:
        print("\nHost did not respond to ping\n")
        return False  # Host did not respond to ping


def os_detection(host):
    command = ['ping', '-c', '1', '-W', '1', host]

    ping_process = subprocess.Popen(['ping', '-c', '1', host], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = ping_process.communicate()
    
    if error:
        print(f"Error: {error.decode()}")
    
    else:
        output_str = output.decode()
        ttl_index = output_str.find('ttl=')
    if ttl_index != -1:
        # Extract the TTL value
        ttl_value = int(output_str[ttl_index + 4:].split()[0])
        if ttl_value == 64:
            print("\n[*] Based on Ping TTL Scan. The Device Is Highly Probable To Be A LINUX/UNIX or MacOS Machine\n")
        elif ttl_value == 128:
            print("\n[*] Based on Ping TTL Scan. The Device Is Highly Probable To Be A Windows Machine\n")
        elif ttl_value >= 255:
            print("\n[*] Based on Ping TTL Scan. The Device Is Highly Probable To Be A Network Router\n")



def information_gathering(url):

    print(colored(f"[*] WARNING : Do Not Use Nmap  For Scanning Targets You Are Not Authorized To Scan\n",color="red"))

    

    # available_options = ['Ping Connection', 'Nmap Connection Check', 'Traceroute Check', 'Port Scanner']
    message = colored(f" [*] 1. Ping Connection Scan \n [*] 2. Nmap Connection Scan \n [*] 3. Nmap Port Scan\n [*] 4. Traceroute Scan\n [*] 5. Ping OS Detection Scan\n", color="yellow")
    print(message)

    try:
        option = int(input("Enter number to the corrosponding option"))
    except ValueError:
        print(colored(f"\nPlease enter a valid number \n" ,color="red"))
    except EOFError:
        print(colored(f"\nInput operation cancelled by the user.",color="red"))
    except KeyboardInterrupt:
        print(colored(f"\nProgram interrupted by the user.",color="red"))
    except Exception as e:
        print(colored(f"\nError {e}",color="red"))
    
    if option == 1:
        ping_host(url)
    elif option == 5:
        os_detection(url)
    else:
        pass

  

banner = pyfiglet.figlet_format("BLACK HAWK")
colored_banner = colored(banner, color="green")
print(colored_banner)
print("Vul Scanner & Information Gatherer | By : Roshan Bhatia | IG/@2kwattz")
time.sleep(1)
print(colored(f"\n[*] Ensure you are on the same network for scanning local devices  \n",color="yellow"))
url = input("[*] Enter the URL/IP you want to scan. \n")
os.system('cls' if os.name == 'nt' else 'clear')

if '@' in url:
    print(colored(f"You have to enter a valid IP/Web Address. Not Email Address, My Dear Sir" ,color="red"))    
elif url == '':
    print(colored(f"Scanning Target cannot be blank" ,color="red"))

elif '.' not in url:
    print(colored(f"Invalid Scanning Target. Please enter a valid IP/Web Address" ,color="red")) 
else:
    colored_ip = colored(url, color="green") 
    print(colored(f"Target Selected : {url}\n" ,color="green"))
    information_gathering(url)
